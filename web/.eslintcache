[{"/Users/moturhan/WebstormProjects/webrtc-nestjs-react-example/web/src/App.js":"1","/Users/moturhan/WebstormProjects/webrtc-nestjs-react-example/web/src/pages/index.js":"2","/Users/moturhan/WebstormProjects/webrtc-nestjs-react-example/web/src/utils/peer-video-connection.js":"3","/Users/moturhan/WebstormProjects/webrtc-nestjs-react-example/web/src/index.js":"4","/Users/moturhan/WebstormProjects/webrtc-nestjs-react-example/web/src/components/atoms/index.js":"5","/Users/moturhan/WebstormProjects/webrtc-nestjs-react-example/web/src/components/molecules/MoleculesVideoControls.js":"6","/Users/moturhan/WebstormProjects/webrtc-nestjs-react-example/web/src/pages/Room.jsx":"7","/Users/moturhan/WebstormProjects/webrtc-nestjs-react-example/web/src/components/molecules/MoleculesRemoteVideo.jsx":"8","/Users/moturhan/WebstormProjects/webrtc-nestjs-react-example/web/src/components/atoms/AtomsVideo.jsx":"9","/Users/moturhan/WebstormProjects/webrtc-nestjs-react-example/web/src/reportWebVitals.js":"10","/Users/moturhan/WebstormProjects/webrtc-nestjs-react-example/web/src/components/molecules/index.js":"11","/Users/moturhan/WebstormProjects/webrtc-nestjs-react-example/web/src/pages/Main.jsx":"12","/Users/moturhan/WebstormProjects/webrtc-nestjs-react-example/web/src/components/layout/Gallery.jsx":"13","/Users/moturhan/WebstormProjects/webrtc-nestjs-react-example/web/src/components/organisms/OrganismsMain.jsx":"14","/Users/moturhan/WebstormProjects/webrtc-nestjs-react-example/web/src/hooks/useCalculateVideoLayout.js":"15"},{"size":393,"mtime":1618598865596,"results":"16","hashOfConfig":"17"},{"size":48,"mtime":1618597512621,"results":"18","hashOfConfig":"19"},{"size":3143,"mtime":1635340994851,"results":"20","hashOfConfig":"17"},{"size":580,"mtime":1618598865605,"results":"21","hashOfConfig":"17"},{"size":206,"mtime":1618598865600,"results":"22","hashOfConfig":"17"},{"size":1282,"mtime":1618598865602,"results":"23","hashOfConfig":"17"},{"size":5345,"mtime":1635341035213,"results":"24","hashOfConfig":"17"},{"size":610,"mtime":1635339730962,"results":"25","hashOfConfig":"17"},{"size":456,"mtime":1635104347299,"results":"26","hashOfConfig":"17"},{"size":364,"mtime":1618598865606,"results":"27","hashOfConfig":"17"},{"size":158,"mtime":1618598865602,"results":"28","hashOfConfig":"17"},{"size":1515,"mtime":1618598865605,"results":"29","hashOfConfig":"17"},{"size":188,"mtime":1635104528720,"results":"30","hashOfConfig":"17"},{"size":544,"mtime":1618598865603,"results":"31","hashOfConfig":"17"},{"size":1960,"mtime":1635341103093,"results":"32","hashOfConfig":"17"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1kifr76",{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"9ha6t9",{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"63","messages":"64","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/moturhan/WebstormProjects/webrtc-nestjs-react-example/web/src/App.js",[],"/Users/moturhan/WebstormProjects/webrtc-nestjs-react-example/web/src/pages/index.js",[],"/Users/moturhan/WebstormProjects/webrtc-nestjs-react-example/web/src/utils/peer-video-connection.js",[],"/Users/moturhan/WebstormProjects/webrtc-nestjs-react-example/web/src/index.js",[],["68","69"],"/Users/moturhan/WebstormProjects/webrtc-nestjs-react-example/web/src/components/atoms/index.js",[],"/Users/moturhan/WebstormProjects/webrtc-nestjs-react-example/web/src/components/molecules/MoleculesVideoControls.js",[],["70","71"],"/Users/moturhan/WebstormProjects/webrtc-nestjs-react-example/web/src/pages/Room.jsx",["72"],"import logo from '../images/logo.svg';\nimport {\n  MoleculesVideo,\n  MoleculesVideoControls,\n  OrganismsHeader,\n  Gallery,\n} from '../components';\nimport React, { useEffect, useRef, useState } from 'react';\nimport { createPeerConnectionContext } from '../utils/peer-video-connection';\nimport { useParams } from 'react-router-dom';\nimport {useCalculateVideoLayout} from \"../hooks\";\n\nconst peerVideoConnection = createPeerConnectionContext();\n\nexport const Room = () => {\n  const { room } = useParams();\n  const [connectedUsers, setConnectedUsers] = useState([]);\n  const [userMediaStream, setUserMediaStream] = useState(null);\n  const [displayMediaStream, setDisplayMediaStream] = useState(null);\n  const [isFullScreen, setFullScreen] = useState(false);\n\n  const galleryRef = useRef();\n\n  useCalculateVideoLayout(galleryRef, connectedUsers.length + 1);\n\n  const localVideo = useRef();\n  const mainRef = useRef();\n\n  useEffect(() => {\n    const createMediaStream = async () => {\n      if (!userMediaStream) {\n        const stream = await navigator.mediaDevices.getUserMedia({\n          video: {\n            width: { min: 640, ideal: 1920 },\n            height: { min: 400, ideal: 1080 },\n            aspectRatio: { ideal: 1.7777777778 },\n          },\n          audio: true,\n        });\n\n        if (localVideo.current) {\n          localVideo.current.srcObject = stream;\n        }\n\n        setUserMediaStream(stream);\n\n        peerVideoConnection.joinRoom(room);\n        peerVideoConnection.onAddUser((user) => {\n          setConnectedUsers((users) => [...users, user]);\n          peerVideoConnection.addPeerConnection(`${user}`, localVideo.current.srcObject, (_stream) => {\n            document.getElementById(user).srcObject = _stream;\n          });\n          peerVideoConnection.callUser(user)\n        });\n\n        peerVideoConnection.onRemoveUser((socketId) => {\n          setConnectedUsers((users) => users.filter((user) => user !== socketId));\n          peerVideoConnection.removePeerConnection(socketId);\n        });\n\n        peerVideoConnection.onUpdateUserList(async (users) => {\n          setConnectedUsers(users);\n          for (const user of users) {\n            peerVideoConnection.addPeerConnection(`${user}`, localVideo.current.srcObject, (_stream) => {\n              document.getElementById(user).srcObject = _stream;\n            });\n          }\n\n        });\n\n        peerVideoConnection.onAnswerMade((socket) => peerVideoConnection.callUser(socket));\n      }\n    };\n\n    createMediaStream();\n  }, []);\n\n  async function shareScreen() {\n    const stream = displayMediaStream || (await navigator.mediaDevices.getDisplayMedia());\n\n    const sender =  await peerVideoConnection.senders\n        .find((sender) => sender.track.kind === 'video');\n\n    if (sender){\n      sender.replaceTrack(stream.getTracks()[0]);\n    }\n\n    stream.getVideoTracks()[0].addEventListener('ended', () => {\n      cancelScreenSharing(stream);\n    });\n\n    localVideo.current.srcObject = stream;\n\n    setDisplayMediaStream(stream);\n  }\n\n  async function cancelScreenSharing(stream) {\n    const sender = await peerVideoConnection.senders\n        .find((sender) => sender.track.kind === 'video');\n\n    if (sender){\n      sender.replaceTrack(userMediaStream.getTracks().find((track) => track.kind === 'video'));\n    }\n\n    localVideo.current.srcObject = userMediaStream;\n    stream.getTracks().forEach((track) => track.stop());\n    setDisplayMediaStream(null);\n  }\n\n  function fullScreen() {\n    setFullScreen(true);\n    const elem = mainRef.current;\n    if (elem.requestFullscreen) {\n      elem.requestFullscreen();\n    } else if (elem.msRequestFullscreen) {\n      elem.msRequestFullscreen();\n    } else if (elem.mozRequestFullScreen) {\n      elem.mozRequestFullScreen();\n    } else if (elem.webkitRequestFullscreen) {\n      elem.webkitRequestFullscreen();\n    }\n  }\n\n  function cancelFullScreen() {\n    if (document.exitFullscreen) {\n      document.exitFullscreen();\n    } else if (document.mozCancelFullScreen) {\n      document.mozCancelFullScreen();\n    } else if (document.webkitExitFullscreen) {\n      document.webkitExitFullscreen();\n    } else if (document.msExitFullscreen) {\n      document.msExitFullscreen();\n    }\n  }\n\n  function handleFullScreen(isFullScreen) {\n    setFullScreen(isFullScreen);\n    if (isFullScreen) {\n      fullScreen();\n    } else {\n      cancelFullScreen();\n    }\n  }\n\n  async function handleScreenSharing(isScreenShared) {\n    if (isScreenShared) {\n      await shareScreen();\n    } else {\n      await cancelScreenSharing(displayMediaStream);\n    }\n  }\n\n  return (\n    <div className=\"container\">\n      <OrganismsHeader\n        title=\"WebRTC Example\"\n        picture={logo}\n      />\n\n      <div className=\"main\" ref={mainRef}>\n        <Gallery ref={galleryRef}>\n          <MoleculesVideo ref={localVideo} autoPlay playsInline muted  />\n          {connectedUsers.map((user) => (\n              <MoleculesVideo  key={user}  onClick={() => {\n                peerVideoConnection.callUser(user)\n              }} id={user} autoPlay playsInline />\n          ))}\n        </Gallery>\n\n        <MoleculesVideoControls\n          isScreenSharing={Boolean(displayMediaStream)}\n          onScreenShare={handleScreenSharing}\n          isFullScreen={isFullScreen}\n          onFullScreen={handleFullScreen}\n        />\n      </div>\n    </div>\n  );\n};\n","/Users/moturhan/WebstormProjects/webrtc-nestjs-react-example/web/src/components/molecules/MoleculesRemoteVideo.jsx",[],"/Users/moturhan/WebstormProjects/webrtc-nestjs-react-example/web/src/components/atoms/AtomsVideo.jsx",[],"/Users/moturhan/WebstormProjects/webrtc-nestjs-react-example/web/src/reportWebVitals.js",[],["73","74"],"/Users/moturhan/WebstormProjects/webrtc-nestjs-react-example/web/src/components/molecules/index.js",[],"/Users/moturhan/WebstormProjects/webrtc-nestjs-react-example/web/src/pages/Main.jsx",[],"/Users/moturhan/WebstormProjects/webrtc-nestjs-react-example/web/src/components/layout/Gallery.jsx",[],"/Users/moturhan/WebstormProjects/webrtc-nestjs-react-example/web/src/components/organisms/OrganismsMain.jsx",["75"],"import styled from 'styled-components';\nimport React from 'react';\n\nexport const OrganismsMain = styled.main`\n  flex: 1;\n  position: relative;\n  margin-left: ${(props) => (props.full ? '0' : '280px')};\n  height: calc(100vh - 64px);\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  background: ${(props) => (props.full ? '#16202c' : 'black')};\n\n  @media screen and (max-width: 936px) {\n    margin-left: 0;\n    flex-direction: column;\n    align-items: flex-start;\n    justify-content: flex-start;\n    z-index: inherit;\n  }\n`;\n","/Users/moturhan/WebstormProjects/webrtc-nestjs-react-example/web/src/hooks/useCalculateVideoLayout.js",["76"],{"ruleId":"77","replacedBy":"78"},{"ruleId":"79","replacedBy":"80"},{"ruleId":"77","replacedBy":"81"},{"ruleId":"79","replacedBy":"82"},{"ruleId":"83","severity":1,"message":"84","line":76,"column":6,"nodeType":"85","endLine":76,"endColumn":8,"suggestions":"86"},{"ruleId":"77","replacedBy":"87"},{"ruleId":"79","replacedBy":"88"},{"ruleId":"89","severity":1,"message":"90","line":2,"column":8,"nodeType":"91","messageId":"92","endLine":2,"endColumn":13},{"ruleId":"83","severity":1,"message":"93","line":64,"column":6,"nodeType":"85","endLine":64,"endColumn":35,"suggestions":"94"},"no-native-reassign",["95"],"no-negated-in-lhs",["96"],["95"],["96"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'room' and 'userMediaStream'. Either include them or remove the dependency array.","ArrayExpression",["97"],["95"],["96"],"no-unused-vars","'React' is defined but never used.","Identifier","unusedVar","React Hook useEffect has a missing dependency: 'gallery'. Either include it or remove the dependency array. Mutable values like 'gallery.current' aren't valid dependencies because mutating them doesn't re-render the component.",["98"],"no-global-assign","no-unsafe-negation",{"desc":"99","fix":"100"},{"desc":"101","fix":"102"},"Update the dependencies array to be: [room, userMediaStream]",{"range":"103","text":"104"},"Update the dependencies array to be: [gallery, videoCount]",{"range":"105","text":"106"},[2510,2512],"[room, userMediaStream]",[1925,1954],"[gallery, videoCount]"]